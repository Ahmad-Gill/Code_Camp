# -*- coding: utf-8 -*-
"""time_series_visualizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16ZOVTzxr3U_tIU3FR5-FhCJ3p1amhp5d
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def draw_line_plot():
    # Import the data from "fcc-forum-pageviews.csv" and set the index to the date column
    df = pd.read_csv('fcc-forum-pageviews.csv', parse_dates=['date'], index_col='date')

    # Clean the data by filtering out days when the page views were in the top 2.5% or bottom 2.5% of the dataset
    df = df[(df['value'] >= df['value'].quantile(0.025)) & (df['value'] <= df['value'].quantile(0.975))]

    # Create a line plot using Matplotlib
    fig, ax = plt.subplots(figsize=(10, 5))
    df.plot(ax=ax, color='red')
    ax.set_title('Daily freeCodeCamp Forum Page Views 5/2016-12/2019')
    ax.set_xlabel('Date')
    ax.set_ylabel('Page Views')
    plt.tight_layout()

    # Save and return the image
    plt.savefig('line_plot.png')
    return fig


def draw_bar_plot():
    # Import the data from "fcc-forum-pageviews.csv" and set the index to the date column
    df = pd.read_csv('fcc-forum-pageviews.csv', parse_dates=['date'], index_col='date')

    # Clean the data by filtering out days when the page views were in the top 2.5% or bottom 2.5% of the dataset
    df = df[(df['value'] >= df['value'].quantile(0.025)) & (df['value'] <= df['value'].quantile(0.975))]

    # Extract the year and month from the index
    df['year'] = df.index.year
    df['month'] = df.index.month_name()

    # Group by year and month, calculate the mean, and unstack the dataframe
    df_bar = df.groupby(['year', 'month'])['value'].mean().unstack()

    # Create a bar plot using Matplotlib
    fig, ax = plt.subplots(figsize=(10, 5))
    df_bar.plot(kind='bar', ax=ax)
    ax.set_title('Average Daily Page Views for Each Month')
    ax.set_xlabel('Years')
    ax.set_ylabel('Average Page Views')
    ax.legend(title='Months')
    plt.tight_layout()

    # Save and return the image
    plt.savefig('bar_plot.png')
    return fig


def draw_box_plot():
    # Import the data from "fcc-forum-pageviews.csv" and set the index to the date column
    df = pd.read_csv('fcc-forum-pageviews.csv', parse_dates=['date'], index_col='date')

    # Clean the data by filtering out days when the page views were in the top 2.5% or bottom 2.5% of the dataset
    df = df[(df['value'] >= df['value'].quantile(0.025)) & (df['value'] <= df['value'].quantile(0.975))]

    # Extract the year and month from the index
    df['year'] = df.index.year
    df['month'] = df.index.month_name()

    # Create year-wise and month-wise box plots using Seaborn
    fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(15, 5))
    sns.boxplot(x='year', y='value', data=df, ax=axes[0])
    sns.boxplot(x='month', y='value', data=df, ax=axes[1], order=['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'])

    # Set titles and labels
    axes[0].set_title('Year-wise Box Plot (Trend)')
    axes[0].set_xlabel('Year')
    axes[0].set_ylabel('Page Views')
    axes[1].set_title('Month-wise Box Plot (Seasonality)')
    axes[1].set_xlabel('Month')
    axes[1].set_ylabel('Page Views')

    plt.tight_layout()

    # Save and return the image
    plt.savefig('box_plot.png')
    return fig